paths:
  /api/auth/create:
    post:
      summary: Register a new user
      tags:
        - Authentication
      description: Create a new user account and send OTP verification email
      requestBody:
        description: User registration data
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fullName
                - email
                - password
                - confirm_password
              properties:
                fullName:
                  type: string
                  description: User's full name
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: "john.doe@example.com"
                password:
                  type: string
                  description: User's password
                  format: password
                  example: "password123"
                confirm_password:
                  type: string
                  description: Password confirmation
                  format: password
                  example: "password123"
                phoneNumber:
                  type: string
                  description: User's phone number (optional)
                  example: "+1234567890"
                churchOfUser:
                  type: string
                  description: User's church affiliation (optional)
                  example: "First Baptist Church"
      responses:
        200:
          description: Account created successfully, verification email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An otp message has been sent to your mail"
                  userId:
                    type: string
                    example: "550e8400-e29b-41d4-a716-446655440000"
        400:
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input data"
        409:
          description: Email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User with this email already exists"
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"

  /api/auth/verify:
    post:
      summary: Verify user account
      tags:
        - Authentication
      description: Verify user account with OTP code
      requestBody:
        description: Verification data
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - code
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: "john.doe@example.com"
                code:
                  type: string
                  description: OTP code received via email
                  example: "123456"
      responses:
        201:
          description: Account verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      userId:
                        type: string
                      fullName:
                        type: string
                      email:
                        type: string
                      phoneNumber:
                        type: string
                      churchOfUser:
                        type: string
                      role_id:
                        type: number
        400:
          description: Invalid verification data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid credentials"
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"

  /api/auth/new-otp:
    post:
      summary: Request new OTP
      tags:
        - Authentication
      description: Request a new OTP code for verification
      requestBody:
        description: User ID
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: "john.doe@example.com"
      responses:
        200:
          description: New OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "A new otp has been sent"
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User Id is required"
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"

  /api/auth/login:
    post:
      summary: Login user
      tags:
        - Authentication
      description: Authenticate user and return access token
      requestBody:
        description: Login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email
                  example: "john.doe@example.com"
                password:
                  type: string
                  format: password
                  description: User's password
                  example: "password123"
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT access token
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      fullName:
                        type: string
                      email:
                        type: string
                      phoneNumber:
                        type: string
                      churchOfUser:
                        type: string
        400:
          description: Invalid credentials or validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid credentials"
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"

  /api/auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get a new access token using refresh token from cookies
      responses:
        200:
          description: Successfully refreshed token
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: New JWT access token
        401:
          description: Refresh token not found or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Refresh token not found"
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Access token could not be generated"

  /api/auth/update:
    put:
      summary: Update user details
      tags:
        - Authentication
      security:
        - BearerAuth: []
      description: Update authenticated user's information
      requestBody:
        description: User update data
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - UserId
              properties:
                UserId:
                  type: string
                  description: ID of the user to update
                  example: "550e8400-e29b-41d4-a716-446655440000"
                fullName:
                  type: string
                  description: User's new full name (optional)
                  example: "John Smith"
                email:
                  type: string
                  format: email
                  description: User's new email address (optional)
                  example: "john.smith@example.com"
                phoneNumber:
                  type: string
                  description: User's new phone number (optional)
                  example: "+1234567890"
                churchOfUser:
                  type: string
                  description: User's new church affiliation (optional)
                  example: "Second Baptist Church"
      responses:
        202:
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      userId:
                        type: string
                      fullName:
                        type: string
                      email:
                        type: string
                      phoneNumber:
                        type: string
                      churchOfUser:
                        type: string
                      role_id:
                        type: number
        400:
          description: Invalid update data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid update data"
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token, authorization denied"
        409:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"

  /api/auth/delete:
    delete:
      summary: Delete user account
      tags:
        - Authentication
      security:
        - BearerAuth: []
      description: Delete authenticated user's account
      requestBody:
        description: User ID
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - UserId
              properties:
                UserId:
                  type: string
                  description: ID of the user to delete
                  example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        204:
          description: User deleted successfully
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User id is required"
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token, authorization denied"
        409:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"

  /api/auth/password-otp:
    post:
      summary: Request password reset OTP
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: "john.doe@example.com"
      responses:
        200:
          description: Password reset OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "A reset otp has been sent"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/ServerError'

  /api/auth/reset-password:
    post:
      summary: Reset password using OTP
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - code
                - password
                - confirm_password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                code:
                  type: string
                  description: OTP code received via email
                password:
                  type: string
                  format: password
                confirm_password:
                  type: string
                  format: password
      responses:
        204:
          description: Password reset successful
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/ServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid input data"
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An unexpected error occurred"
